{
  "root": true,
  "parser": "@typescript-eslint/parser", // Specifies the ESLint parser
  "env": {
    "browser": true,
    "es2021":true,
    "jest": true,
    "node": true
  },
  "parserOptions": {
    "ecmaVersion": "latest", 
    "sourceType": "module",
    "project": "./tsconfig.json",
    "creteDefaultProgram": true,
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "settings": {
    "react": {
      "pragma": "React",
      "version": "detect" 
    },
    "imports/resolver": {
      "alias": {
        "map": [["src", "./src"]],
        "extensions": [".ts", ".tsx", ".js"]
      }
    }
  },
  "plugins": [
    "prettier",
    "import",
    "react",
    "react-hooks",
    "@typescript-eslint",
    "testing-library",
    "jest-dom",
    "jest",
    "jsx-a11y"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "rules": {
    /* Prettier */
    "prettier/prettier": "error",

    /* General */
    "arrow-body-style": "off",
    "prefer-arrow-callback": "off",
    "no-use-before-define": "off",
    "no-unused-vars": "off",
    "require-jsdoc": "off",
    "prefer-template": "error",
    "default-param-last": "warn",
    "class-methods-use-this": [
      "off",
      {
        "exceptMethods": [
          "render",
          "getInitialState",
          "getDefaultProps",
          "getChildContext",
          "shouldComponentUpdate"
        ]
      }
    ],
    "no-multiple-empty-lines": ["error", { "max": 1, "maxEOF": 1 }],
    "object-property-newline": ["error", { "allowAllPropertiesOnSameLine": true }],
    "complexity": ["error", { "max": 15 }],
    "max-lines": ["error", { "max": 300, "skipComments": true, "skipBlankLines": true }],
    "no-implicit-coercion": ["error", { "allow": ["!!"] }],
    "max-params": ["error", 10],
    "no-console": "off",//["error", { "allow": ["error"] }],
    "no-magic-numbers": ["warn", { "ignore": [1, 0, -1] }],
    "no-irregular-whitespace": ["error", { "skipTemplates": true }],
    "padding-line-between-statements": [
      "error",
      { "blankLine": "always", "prev": "*", "next": "return" },
      { "blankLine": "always", "prev": "*", "next": "export" }
    ],

    /* React */
    "react/display-name": "off",
    "react/jsx-boolean-value": ["error", "never"],
    "react/jsx-closing-bracket-location": "off",
    "react/jsx-wrap-multilines": [
      "error",
      {
        "assignment": "parens-new-line",
        "return": "parens-new-line",
        "arrow": "parens-new-line",
        "condition": "parens-new-line",
        "logical": "parens-new-line"
      }
    ],
    "react/prop-types": "off",
    "react/prefer-stateless-function": "warn",
    "react/no-danger": "error",
    "react/jsx-uses-react": "off",
    "react/react-in-jsx-scope": "off",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "error",

    /* JSX Rules */
    "jsx-a11y/label-has-for": [
      "error",
      {
        "components": ["label"],
        "required": {
          "some": ["nesting", "id"],
          "allowChildren": true
        }
      }
    ],
    "jsx-a11y/label-has-associated-control": [
      "error",
      {
        "labelComponents": ["label"],
        "labelAttributes": ["htmlFor"],
        "controlComponents": ["input"],
        "assert": "both"
      }
    ],

    /* Import */
    "sort-imports": "off",
    "import/order": [
      "error",
      {
        "groups": ["builtin", "external", ["index", "sibling"], ["parent", "internal"], "object"],
        "newlines-between": "always-and-inside-groups",
        "pathGroups": [
          {
            "pattern": "react+(|-dom)",
            "group": "external",
            "position": "before"
          }
        ],
        "pathGroupsExcludedImportTypes": ["react+(|-dom)"],
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],

    /* Typescript */
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/explicit-function-return-type": "error",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/no-use-before-define": "error",
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "_" }],
    "@typescript-eslint/consistent-type-imports": "error"
  }
}